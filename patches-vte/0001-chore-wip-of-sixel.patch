From 6995974625d19271ac037fda5d2c593c7b8f5798 Mon Sep 17 00:00:00 2001
From: nenw <khi@nenw.dev>
Date: Sun, 8 Sep 2024 18:58:49 +0900
Subject: [PATCH] chore: wip of sixel

---
 src/ansi.rs | 66 +++++++++++++++++++++++++++++++++++++++++++++++------
 1 file changed, 59 insertions(+), 7 deletions(-)

diff --git a/src/ansi.rs b/src/ansi.rs
index 4ca2fa6..43de415 100644
--- a/src/ansi.rs
+++ b/src/ansi.rs
@@ -252,6 +252,9 @@ struct ProcessorState<T: Timeout> {
     /// Last processed character for repetition.
     preceding_char: Option<char>,
 
+    /// DCS sequence waiting for termination.
+    dcs: Option<Dcs>,
+
     /// State for synchronized terminal updates.
     sync_state: SyncState<T>,
 }
@@ -261,16 +264,30 @@ struct SyncState<T: Timeout> {
     /// Handler for synchronized updates.
     timeout: T,
 
+    /// Sync DCS waiting for termination sequence.
+    pending_dcs: Option<Dcs>,
+
     /// Bytes read during the synchronized update.
     buffer: Vec<u8>,
 }
 
 impl<T: Timeout> Default for SyncState<T> {
     fn default() -> Self {
-        Self { buffer: Vec::with_capacity(SYNC_BUFFER_SIZE), timeout: T::default() }
+        Self {
+            buffer: Vec::with_capacity(SYNC_BUFFER_SIZE),
+            pending_dcs: None,
+            timeout: T::default(),
+        }
     }
 }
 
+/// Pending DCS sequence.
+#[derive(Debug)]
+enum Dcs {
+    /// Sixel data
+    SixelData(Box<sixel::Parser>),
+}
+
 /// The processor wraps a `crate::Parser` to ultimately call methods on a Handler.
 #[cfg(not(feature = "no_std"))]
 #[derive(Default)]
@@ -630,6 +647,14 @@ pub trait Handler {
 
     /// Report text area size in characters.
     fn text_area_size_chars(&mut self) {}
+    
+    /// Create a parser for Sixel data.
+    fn start_sixel_graphic(&mut self, _params: &Params) -> Option<Box<sixel::Parser>> {
+        None
+    }
+
+    /// Insert a new graphic item.
+    fn insert_graphic(&mut self, _data: GraphicData, _palette: Option<Vec<Rgb>>) {}
 
     /// Set hyperlink.
     fn set_hyperlink(&mut self, _: Option<Hyperlink>) {}
@@ -807,6 +832,8 @@ pub enum Mode {
     LineFeedNewLine = 20,
     /// ?25
     ShowCursor = 25,
+    /// ?80
+    SixelScrolling = 80,
     /// ?1000
     ReportMouseClicks = 1000,
     /// ?1002
@@ -825,6 +852,8 @@ pub enum Mode {
     UrgencyHints = 1042,
     /// ?1049
     SwapScreenAndSetRestoreCursor = 1049,
+    /// Use a private palette for each new graphic.
+    SixelPrivateColorRegisters = 1070,
     /// ?2004
     BracketedPaste = 2004,
 }
@@ -846,6 +875,7 @@ impl Mode {
                 7 => Mode::LineWrap,
                 12 => Mode::BlinkingCursor,
                 25 => Mode::ShowCursor,
+                80 => Mode::SixelScrolling,
                 1000 => Mode::ReportMouseClicks,
                 1002 => Mode::ReportCellMouseMotion,
                 1003 => Mode::ReportAllMouseMotion,
@@ -855,6 +885,7 @@ impl Mode {
                 1007 => Mode::AlternateScroll,
                 1042 => Mode::UrgencyHints,
                 1049 => Mode::SwapScreenAndSetRestoreCursor,
+                1070 => Mode::SixelPrivateColorRegisters,
                 2004 => Mode::BracketedPaste,
                 _ => {
                     trace!("[unimplemented] primitive mode: {}", num);
@@ -1183,20 +1214,41 @@ where
 
     #[inline]
     fn hook(&mut self, params: &Params, intermediates: &[u8], ignore: bool, action: char) {
-        debug!(
-            "[unhandled hook] params={:?}, ints: {:?}, ignore: {:?}, action: {:?}",
-            params, intermediates, ignore, action
-        );
+         match (action, intermediates) {
+            ('q', []) => {
+                let parser = self.handler.start_sixel_graphic(params);
+                self.state.dcs = parser.map(Dcs::SixelData);
+            },
+            _ => debug!(
+                "[unhandled hook] params={:?}, ints: {:?}, ignore: {:?}, action: {:?}",
+                params, intermediates, ignore, action
+            ),
+        }
     }
 
     #[inline]
     fn put(&mut self, byte: u8) {
-        debug!("[unhandled put] byte={:?}", byte);
+        match self.state.dcs {
+            Some(Dcs::SixelData(ref mut parser)) => {
+                if let Err(err) = parser.put(byte) {
+                    log::warn!("Failed to parse Sixel data: {}", err);
+                    self.state.dcs = None;
+                }
+            },
+
+            _ => debug!("[unhandled put] byte={:?}", byte),
+        }
     }
 
     #[inline]
     fn unhook(&mut self) {
-        debug!("[unhandled unhook]");
+        match self.state.dcs.take() {
+            Some(Dcs::SixelData(parser)) => match parser.finish() {
+                Ok((graphic, palette)) => self.handler.insert_graphic(graphic, Some(palette)),
+                Err(err) => log::warn!("Failed to parse Sixel data: {}", err),
+            },
+            _ => debug!("[unhandled unhook]"),
+        }
     }
 
     #[inline]
-- 
2.45.2

